Elm.SignupForm = Elm.SignupForm || {};
Elm.SignupForm.make = function (_elm) {
   "use strict";
   _elm.SignupForm = _elm.SignupForm || {};
   if (_elm.SignupForm.values) return _elm.SignupForm.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var withUsernameTaken = F2(function (isTaken,model) {
      var currentErrors = model.errors;
      var newErrors = _U.update(currentErrors,{usernameTaken: isTaken});
      return _U.update(model,{errors: newErrors});
   });
   var getErrors = function (model) {
      return {username: _U.eq(model.username,"") ? "Please enter a username" : ""
             ,password: _U.eq(model.password,"") ? "Please enter a password" : ""
             ,usernameTaken: model.errors.usernameTaken};
   };
   var viewUsernameErrors = function (model) {    return model.errors.usernameTaken ? "That username is taken!" : model.errors.username;};
   var view = F2(function (actionDispatcher,model) {
      return A2($Html.form,
      _U.list([$Html$Attributes.id("signup-form")]),
      _U.list([A2($Html.h1,_U.list([]),_U.list([$Html.text("Sensational Signup Form")]))
              ,A2($Html.label,_U.list([$Html$Attributes.$for("username-field")]),_U.list([$Html.text("username: ")]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.id("username-field")
                      ,$Html$Attributes.type$("text")
                      ,$Html$Attributes.value(model.username)
                      ,A3($Html$Events.on,
                      "input",
                      $Html$Events.targetValue,
                      function (str) {
                         return A2($Signal.message,actionDispatcher,{actionType: "SET_USERNAME",payload: str});
                      })]),
              _U.list([]))
              ,A2($Html.div,_U.list([$Html$Attributes.$class("validation-error")]),_U.list([$Html.text(model.errors.username)]))
              ,A2($Html.label,_U.list([$Html$Attributes.$for("password")]),_U.list([$Html.text("password: ")]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.id("password-field")
                      ,$Html$Attributes.type$("text")
                      ,$Html$Attributes.value(model.password)
                      ,A3($Html$Events.on,
                      "input",
                      $Html$Events.targetValue,
                      function (str) {
                         return A2($Signal.message,actionDispatcher,{actionType: "SET_PASSWORD",payload: str});
                      })]),
              _U.list([]))
              ,A2($Html.div,_U.list([$Html$Attributes.$class("validation-error")]),_U.list([$Html.text(viewUsernameErrors(model))]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("signup-button"),A2($Html$Events.onClick,actionDispatcher,{actionType: "VALIDATE",payload: ""})]),
              _U.list([$Html.text("Sign Up!")]))]));
   });
   var initialErrors = {username: "",password: "",usernameTaken: false};
   var update = F2(function (action,model) {
      if (_U.eq(action.actionType,"VALIDATE")) {
            var usernameAvailableAction = {actionType: "USERNAME_AVAILABLE",payload: ""};
            var usernameTakenAction = {actionType: "USERNAME_TAKEN",payload: ""};
            var url = A2($Basics._op["++"],"https://api.github.com/users/",model.username);
            var request = A2($Http.get,$Json$Decode.succeed(usernameTakenAction),url);
            var neverFailingRequest = A2($Task.onError,request,function (err) {    return $Task.succeed(usernameAvailableAction);});
            return {ctor: "_Tuple2",_0: _U.update(model,{errors: getErrors(model)}),_1: $Effects.task(neverFailingRequest)};
         } else if (_U.eq(action.actionType,"SET_USERNAME")) return {ctor: "_Tuple2"
                                                                    ,_0: _U.update(model,{username: action.payload,errors: initialErrors})
                                                                    ,_1: $Effects.none}; else if (_U.eq(action.actionType,"SET_PASSWORD"))
            return {ctor: "_Tuple2",_0: _U.update(model,{password: action.payload,errors: initialErrors}),_1: $Effects.none}; else if (_U.eq(action.actionType,
               "USERNAME_TAKEN")) return {ctor: "_Tuple2",_0: A2(withUsernameTaken,true,model),_1: $Effects.none}; else if (_U.eq(action.actionType,
                  "USERNAME_AVAILABLE")) return {ctor: "_Tuple2",_0: A2(withUsernameTaken,false,model),_1: $Effects.none}; else return {ctor: "_Tuple2"
                                                                                                                                       ,_0: model
                                                                                                                                       ,_1: $Effects.none};
   });
   var initialModel = {username: "",password: "",errors: initialErrors};
   var app = $StartApp.start({init: {ctor: "_Tuple2",_0: initialModel,_1: $Effects.none},update: update,view: view,inputs: _U.list([])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.SignupForm.values = {_op: _op
                                   ,initialModel: initialModel
                                   ,initialErrors: initialErrors
                                   ,view: view
                                   ,viewUsernameErrors: viewUsernameErrors
                                   ,getErrors: getErrors
                                   ,withUsernameTaken: withUsernameTaken
                                   ,update: update
                                   ,app: app
                                   ,main: main};
};